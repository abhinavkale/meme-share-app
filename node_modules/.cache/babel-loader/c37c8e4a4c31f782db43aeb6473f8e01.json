{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/mypc/Projects/meme-creator/src/Meme/Meme.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"./styles.module.css\";\nexport const Meme = () => {\n  _s();\n\n  const [memes, setMemes] = useState([]);\n  const [memeIndex, SetMemeIndex] = useState(0);\n  const [captions, setCaptions] = useState([]);\n\n  const updateCaption = (e, index) => {\n    const text = e.target.value || \"\";\n    setCaptions(captions.map((c, i) => {\n      if (index === i) {\n        return;\n      } else {\n        return c;\n      }\n    }));\n  };\n\n  const shuffleMemes = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => {\n      res.json().then(res => {\n        // console.log(res);\n        const _memes = res.data.memes;\n        shuffleMemes(_memes);\n        setMemes(_memes);\n      });\n    });\n  }, []);\n  useEffect(() => {\n    if (memes.length) {\n      setCaptions(Array(memes[memeIndex].box_count).fill(\"\"));\n    }\n  }, [memeIndex, memes]);\n  useEffect(() => {\n    console.log(captions);\n  }, [captions]);\n  return memes.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(\"Generate!\"),\n      className: styles.generate,\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => SetMemeIndex(memeIndex + 1),\n      className: styles.skip,\n      children: \"Skip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), captions.map((c, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => updateCaption(e, index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: memes[memeIndex].url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"/\"\n  }, void 0, false);\n};\n\n_s(Meme, \"MQ9wjdHbqT0CdYMPnioZydVv4B0=\");\n\n_c = Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"sources":["/home/mypc/Projects/meme-creator/src/Meme/Meme.js"],"names":["React","useEffect","useState","styles","Meme","memes","setMemes","memeIndex","SetMemeIndex","captions","setCaptions","updateCaption","e","index","text","target","value","map","c","i","shuffleMemes","array","length","j","Math","floor","random","temp","fetch","then","res","json","_memes","data","Array","box_count","fill","console","log","container","generate","skip","url"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styles from \"./styles.module.css\";\n\nexport const Meme = () => {\n  const [memes, setMemes] = useState([]);\n  const [memeIndex, SetMemeIndex] = useState(0);\n  const [captions, setCaptions] = useState([]);\n\n  const updateCaption = (e, index) => {\n    const text = e.target.value || \"\";\n    setCaptions(\n      captions.map((c, i) => {\n        if (index === i) {\n          return;\n        } else {\n          return c;\n        }\n      })\n    );\n  };\n\n  const shuffleMemes = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then((res) => {\n      res.json().then((res) => {\n        // console.log(res);\n        const _memes = res.data.memes;\n        shuffleMemes(_memes);\n        setMemes(_memes);\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    if (memes.length) {\n      setCaptions(Array(memes[memeIndex].box_count).fill(\"\"));\n    }\n  }, [memeIndex, memes]);\n\n  useEffect(() => {\n    console.log(captions);\n  }, [captions]);\n\n  return memes.length ? (\n    <div className={styles.container}>\n      <button\n        onClick={() => console.log(\"Generate!\")}\n        className={styles.generate}\n      >\n        Generate\n      </button>\n      <button\n        onClick={() => SetMemeIndex(memeIndex + 1)}\n        className={styles.skip}\n      >\n        Skip\n      </button>\n      {captions.map((c, index) => (\n        <input onChange={(e) => updateCaption(e, index)} key={index} />\n      ))}\n      <img src={memes[memeIndex].url} />\n    </div>\n  ) : (\n    <>/</>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}