{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/mypc/Projects/meme-creator/src/Meme/Meme.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styles from \"./styles.module.css\";\n\nrequire(\"dotenv\").config();\n\nexport const Meme = () => {\n  _s();\n\n  const [memes, setMemes] = useState([]);\n  const [memeIndex, SetMemeIndex] = useState(0);\n  const [captions, setCaptions] = useState([]);\n  const history = useHistory();\n\n  const updateCaption = (e, index) => {\n    const text = e.target.value || \"\";\n    setCaptions(captions.map((c, i) => {\n      if (index === i) {\n        return text;\n      } else {\n        return c;\n      }\n    }));\n  };\n\n  const generateMeme = () => {\n    const currentMeme = memes[memeIndex];\n    const formData = new FormData();\n    var username = process.env.REACT_IMGFLIP_USERNAME;\n    var password = process.env.REACT_IMGFLIP_PASSWORD;\n    formData.append(\"username\", username);\n    formData.append(\"password\", password);\n    formData.append(\"template_id\", currentMeme.id);\n    captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\n    console.log(username);\n    fetch(\"https://api.imgflip.com/caption_image\", {\n      method: \"POST\",\n      body: formData\n    }).then(res => {\n      res.json().then(res => {\n        console.log(res);\n        if (!res.data) alert(\"Enter input fields\");else history.push(`/generated?url=${res.data.url}`);\n      });\n    });\n  };\n\n  const shuffleMemes = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => {\n      res.json().then(res => {\n        // console.log(res);\n        const _memes = res.data.memes;\n        shuffleMemes(_memes);\n        setMemes(_memes);\n      });\n    });\n  }, []);\n  useEffect(() => {\n    if (memes.length) {\n      setCaptions(Array(memes[memeIndex].box_count).fill(\"\"));\n    }\n  }, [memeIndex, memes]); //   useEffect(() => {\n  //     console.log(captions);\n  //   }, [captions]);\n\n  return memes.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => generateMeme(),\n      className: styles.generate,\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => SetMemeIndex(memeIndex + 1),\n      className: styles.skip,\n      children: \"Skip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), captions.map((c, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => updateCaption(e, index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: memes[memeIndex].url,\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"/\"\n  }, void 0, false);\n};\n\n_s(Meme, \"YKdWRMNt3djGt985a53tjA1YkFM=\", false, function () {\n  return [useHistory];\n});\n\n_c = Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"sources":["/home/mypc/Projects/meme-creator/src/Meme/Meme.js"],"names":["React","useEffect","useState","useHistory","styles","require","config","Meme","memes","setMemes","memeIndex","SetMemeIndex","captions","setCaptions","history","updateCaption","e","index","text","target","value","map","c","i","generateMeme","currentMeme","formData","FormData","username","process","env","REACT_IMGFLIP_USERNAME","password","REACT_IMGFLIP_PASSWORD","append","id","forEach","console","log","fetch","method","body","then","res","json","data","alert","push","url","shuffleMemes","array","length","j","Math","floor","random","temp","_memes","Array","box_count","fill","container","generate","skip"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMY,OAAO,GAAGX,UAAU,EAA1B;;AAEA,QAAMY,aAAa,GAAG,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAClC,UAAMC,IAAI,GAAGF,CAAC,CAACG,MAAF,CAASC,KAAT,IAAkB,EAA/B;AACAP,IAAAA,WAAW,CACTD,QAAQ,CAACS,GAAT,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACrB,UAAIN,KAAK,KAAKM,CAAd,EAAiB;AACf,eAAOL,IAAP;AACD,OAFD,MAEO;AACL,eAAOI,CAAP;AACD;AACF,KAND,CADS,CAAX;AASD,GAXD;;AAaA,QAAME,YAAY,GAAG,MAAM;AACzB,UAAMC,WAAW,GAAGjB,KAAK,CAACE,SAAD,CAAzB;AACA,UAAMgB,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA,QAAIC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAA3B;AACA,QAAIC,QAAQ,GAAGH,OAAO,CAACC,GAAR,CAAYG,sBAA3B;AAEAP,IAAAA,QAAQ,CAACQ,MAAT,CAAgB,UAAhB,EAA4BN,QAA5B;AACAF,IAAAA,QAAQ,CAACQ,MAAT,CAAgB,UAAhB,EAA4BF,QAA5B;AACAN,IAAAA,QAAQ,CAACQ,MAAT,CAAgB,aAAhB,EAA+BT,WAAW,CAACU,EAA3C;AACAvB,IAAAA,QAAQ,CAACwB,OAAT,CAAiB,CAACd,CAAD,EAAIL,KAAJ,KAAcS,QAAQ,CAACQ,MAAT,CAAiB,SAAQjB,KAAM,SAA/B,EAAyCK,CAAzC,CAA/B;AAEAe,IAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AACAW,IAAAA,KAAK,CAAC,uCAAD,EAA0C;AAC7CC,MAAAA,MAAM,EAAE,MADqC;AAE7CC,MAAAA,IAAI,EAAEf;AAFuC,KAA1C,CAAL,CAGGgB,IAHH,CAGSC,GAAD,IAAS;AACfA,MAAAA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAiBC,GAAD,IAAS;AACvBN,QAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACA,YAAI,CAACA,GAAG,CAACE,IAAT,EAAeC,KAAK,CAAC,oBAAD,CAAL,CAAf,KACKhC,OAAO,CAACiC,IAAR,CAAc,kBAAiBJ,GAAG,CAACE,IAAJ,CAASG,GAAI,EAA5C;AACN,OAJD;AAKD,KATD;AAUD,GAtBD;;AAwBA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,SAAK,IAAI3B,CAAC,GAAG2B,KAAK,CAACC,MAAN,GAAe,CAA5B,EAA+B5B,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzC,YAAM6B,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBhC,CAA3B,CAAV;AACA,YAAMiC,IAAI,GAAGN,KAAK,CAAC3B,CAAD,CAAlB;AACA2B,MAAAA,KAAK,CAAC3B,CAAD,CAAL,GAAW2B,KAAK,CAACE,CAAD,CAAhB;AACAF,MAAAA,KAAK,CAACE,CAAD,CAAL,GAAWI,IAAX;AACD;AACF,GAPD;;AASAvD,EAAAA,SAAS,CAAC,MAAM;AACdsC,IAAAA,KAAK,CAAC,mCAAD,CAAL,CAA2CG,IAA3C,CAAiDC,GAAD,IAAS;AACvDA,MAAAA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAiBC,GAAD,IAAS;AACvB;AACA,cAAMc,MAAM,GAAGd,GAAG,CAACE,IAAJ,CAASrC,KAAxB;AACAyC,QAAAA,YAAY,CAACQ,MAAD,CAAZ;AACAhD,QAAAA,QAAQ,CAACgD,MAAD,CAAR;AACD,OALD;AAMD,KAPD;AAQD,GATQ,EASN,EATM,CAAT;AAWAxD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,KAAK,CAAC2C,MAAV,EAAkB;AAChBtC,MAAAA,WAAW,CAAC6C,KAAK,CAAClD,KAAK,CAACE,SAAD,CAAL,CAAiBiD,SAAlB,CAAL,CAAkCC,IAAlC,CAAuC,EAAvC,CAAD,CAAX;AACD;AACF,GAJQ,EAIN,CAAClD,SAAD,EAAYF,KAAZ,CAJM,CAAT,CAhEwB,CAsExB;AACA;AACA;;AAEA,SAAOA,KAAK,CAAC2C,MAAN,gBACL;AAAK,IAAA,SAAS,EAAE/C,MAAM,CAACyD,SAAvB;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAE,MAAMrC,YAAY,EAAnC;AAAuC,MAAA,SAAS,EAAEpB,MAAM,CAAC0D,QAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AACE,MAAA,OAAO,EAAE,MAAMnD,YAAY,CAACD,SAAS,GAAG,CAAb,CAD7B;AAEE,MAAA,SAAS,EAAEN,MAAM,CAAC2D,IAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,EAUGnD,QAAQ,CAACS,GAAT,CAAa,CAACC,CAAD,EAAIL,KAAJ,kBACZ;AAAO,MAAA,QAAQ,EAAGD,CAAD,IAAOD,aAAa,CAACC,CAAD,EAAIC,KAAJ;AAArC,OAAsDA,KAAtD;AAAA;AAAA;AAAA;AAAA,YADD,CAVH,eAaE;AAAK,MAAA,GAAG,EAAET,KAAK,CAACE,SAAD,CAAL,CAAiBsC,GAA3B;AAAgC,MAAA,GAAG,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADK,gBAiBL;AAAA;AAAA,mBAjBF;AAmBD,CA7FM;;GAAMzC,I;UAKKJ,U;;;KALLI,I","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styles from \"./styles.module.css\";\nrequire(\"dotenv\").config();\n\nexport const Meme = () => {\n  const [memes, setMemes] = useState([]);\n  const [memeIndex, SetMemeIndex] = useState(0);\n  const [captions, setCaptions] = useState([]);\n\n  const history = useHistory();\n\n  const updateCaption = (e, index) => {\n    const text = e.target.value || \"\";\n    setCaptions(\n      captions.map((c, i) => {\n        if (index === i) {\n          return text;\n        } else {\n          return c;\n        }\n      })\n    );\n  };\n\n  const generateMeme = () => {\n    const currentMeme = memes[memeIndex];\n    const formData = new FormData();\n    var username = process.env.REACT_IMGFLIP_USERNAME;\n    var password = process.env.REACT_IMGFLIP_PASSWORD;\n\n    formData.append(\"username\", username);\n    formData.append(\"password\", password);\n    formData.append(\"template_id\", currentMeme.id);\n    captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\n\n    console.log(username);\n    fetch(\"https://api.imgflip.com/caption_image\", {\n      method: \"POST\",\n      body: formData,\n    }).then((res) => {\n      res.json().then((res) => {\n        console.log(res);\n        if (!res.data) alert(\"Enter input fields\");\n        else history.push(`/generated?url=${res.data.url}`);\n      });\n    });\n  };\n\n  const shuffleMemes = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then((res) => {\n      res.json().then((res) => {\n        // console.log(res);\n        const _memes = res.data.memes;\n        shuffleMemes(_memes);\n        setMemes(_memes);\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    if (memes.length) {\n      setCaptions(Array(memes[memeIndex].box_count).fill(\"\"));\n    }\n  }, [memeIndex, memes]);\n\n  //   useEffect(() => {\n  //     console.log(captions);\n  //   }, [captions]);\n\n  return memes.length ? (\n    <div className={styles.container}>\n      <button onClick={() => generateMeme()} className={styles.generate}>\n        Generate\n      </button>\n      <button\n        onClick={() => SetMemeIndex(memeIndex + 1)}\n        className={styles.skip}\n      >\n        Skip\n      </button>\n      {captions.map((c, index) => (\n        <input onChange={(e) => updateCaption(e, index)} key={index} />\n      ))}\n      <img src={memes[memeIndex].url} alt=\"\" />\n    </div>\n  ) : (\n    <>/</>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}